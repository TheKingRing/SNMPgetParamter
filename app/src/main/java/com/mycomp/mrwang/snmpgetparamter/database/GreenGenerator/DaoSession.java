package com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.trapPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.netPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.versionPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.inputExistPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.decoder1Para;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.decoder2Para;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ipreceivePara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.dvbcPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.dvbsPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ds3e3Para;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.other;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ipToASIPara;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.restartEnable;

import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.trapParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.netParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.versionParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.inputExistParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.decoder1ParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.decoder2ParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ipreceiveParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.dvbcParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.dvbsParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ds3e3ParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.otherDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ipToASIParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.restartEnableDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig trapParaDaoConfig;
    private final DaoConfig netParaDaoConfig;
    private final DaoConfig versionParaDaoConfig;
    private final DaoConfig inputExistParaDaoConfig;
    private final DaoConfig decoder1ParaDaoConfig;
    private final DaoConfig decoder2ParaDaoConfig;
    private final DaoConfig ipreceiveParaDaoConfig;
    private final DaoConfig dvbcParaDaoConfig;
    private final DaoConfig dvbsParaDaoConfig;
    private final DaoConfig ds3e3ParaDaoConfig;
    private final DaoConfig otherDaoConfig;
    private final DaoConfig ipToASIParaDaoConfig;
    private final DaoConfig restartEnableDaoConfig;

    private final trapParaDao trapParaDao;
    private final netParaDao netParaDao;
    private final versionParaDao versionParaDao;
    private final inputExistParaDao inputExistParaDao;
    private final decoder1ParaDao decoder1ParaDao;
    private final decoder2ParaDao decoder2ParaDao;
    private final ipreceiveParaDao ipreceiveParaDao;
    private final dvbcParaDao dvbcParaDao;
    private final dvbsParaDao dvbsParaDao;
    private final ds3e3ParaDao ds3e3ParaDao;
    private final otherDao otherDao;
    private final ipToASIParaDao ipToASIParaDao;
    private final restartEnableDao restartEnableDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        trapParaDaoConfig = daoConfigMap.get(trapParaDao.class).clone();
        trapParaDaoConfig.initIdentityScope(type);

        netParaDaoConfig = daoConfigMap.get(netParaDao.class).clone();
        netParaDaoConfig.initIdentityScope(type);

        versionParaDaoConfig = daoConfigMap.get(versionParaDao.class).clone();
        versionParaDaoConfig.initIdentityScope(type);

        inputExistParaDaoConfig = daoConfigMap.get(inputExistParaDao.class).clone();
        inputExistParaDaoConfig.initIdentityScope(type);

        decoder1ParaDaoConfig = daoConfigMap.get(decoder1ParaDao.class).clone();
        decoder1ParaDaoConfig.initIdentityScope(type);

        decoder2ParaDaoConfig = daoConfigMap.get(decoder2ParaDao.class).clone();
        decoder2ParaDaoConfig.initIdentityScope(type);

        ipreceiveParaDaoConfig = daoConfigMap.get(ipreceiveParaDao.class).clone();
        ipreceiveParaDaoConfig.initIdentityScope(type);

        dvbcParaDaoConfig = daoConfigMap.get(dvbcParaDao.class).clone();
        dvbcParaDaoConfig.initIdentityScope(type);

        dvbsParaDaoConfig = daoConfigMap.get(dvbsParaDao.class).clone();
        dvbsParaDaoConfig.initIdentityScope(type);

        ds3e3ParaDaoConfig = daoConfigMap.get(ds3e3ParaDao.class).clone();
        ds3e3ParaDaoConfig.initIdentityScope(type);

        otherDaoConfig = daoConfigMap.get(otherDao.class).clone();
        otherDaoConfig.initIdentityScope(type);

        ipToASIParaDaoConfig = daoConfigMap.get(ipToASIParaDao.class).clone();
        ipToASIParaDaoConfig.initIdentityScope(type);

        restartEnableDaoConfig = daoConfigMap.get(restartEnableDao.class).clone();
        restartEnableDaoConfig.initIdentityScope(type);

        trapParaDao = new trapParaDao(trapParaDaoConfig, this);
        netParaDao = new netParaDao(netParaDaoConfig, this);
        versionParaDao = new versionParaDao(versionParaDaoConfig, this);
        inputExistParaDao = new inputExistParaDao(inputExistParaDaoConfig, this);
        decoder1ParaDao = new decoder1ParaDao(decoder1ParaDaoConfig, this);
        decoder2ParaDao = new decoder2ParaDao(decoder2ParaDaoConfig, this);
        ipreceiveParaDao = new ipreceiveParaDao(ipreceiveParaDaoConfig, this);
        dvbcParaDao = new dvbcParaDao(dvbcParaDaoConfig, this);
        dvbsParaDao = new dvbsParaDao(dvbsParaDaoConfig, this);
        ds3e3ParaDao = new ds3e3ParaDao(ds3e3ParaDaoConfig, this);
        otherDao = new otherDao(otherDaoConfig, this);
        ipToASIParaDao = new ipToASIParaDao(ipToASIParaDaoConfig, this);
        restartEnableDao = new restartEnableDao(restartEnableDaoConfig, this);

        registerDao(trapPara.class, trapParaDao);
        registerDao(netPara.class, netParaDao);
        registerDao(versionPara.class, versionParaDao);
        registerDao(inputExistPara.class, inputExistParaDao);
        registerDao(decoder1Para.class, decoder1ParaDao);
        registerDao(decoder2Para.class, decoder2ParaDao);
        registerDao(ipreceivePara.class, ipreceiveParaDao);
        registerDao(dvbcPara.class, dvbcParaDao);
        registerDao(dvbsPara.class, dvbsParaDao);
        registerDao(ds3e3Para.class, ds3e3ParaDao);
        registerDao(other.class, otherDao);
        registerDao(ipToASIPara.class, ipToASIParaDao);
        registerDao(restartEnable.class, restartEnableDao);
    }
    
    public void clear() {
        trapParaDaoConfig.getIdentityScope().clear();
        netParaDaoConfig.getIdentityScope().clear();
        versionParaDaoConfig.getIdentityScope().clear();
        inputExistParaDaoConfig.getIdentityScope().clear();
        decoder1ParaDaoConfig.getIdentityScope().clear();
        decoder2ParaDaoConfig.getIdentityScope().clear();
        ipreceiveParaDaoConfig.getIdentityScope().clear();
        dvbcParaDaoConfig.getIdentityScope().clear();
        dvbsParaDaoConfig.getIdentityScope().clear();
        ds3e3ParaDaoConfig.getIdentityScope().clear();
        otherDaoConfig.getIdentityScope().clear();
        ipToASIParaDaoConfig.getIdentityScope().clear();
        restartEnableDaoConfig.getIdentityScope().clear();
    }

    public trapParaDao getTrapParaDao() {
        return trapParaDao;
    }

    public netParaDao getNetParaDao() {
        return netParaDao;
    }

    public versionParaDao getVersionParaDao() {
        return versionParaDao;
    }

    public inputExistParaDao getInputExistParaDao() {
        return inputExistParaDao;
    }

    public decoder1ParaDao getDecoder1ParaDao() {
        return decoder1ParaDao;
    }

    public decoder2ParaDao getDecoder2ParaDao() {
        return decoder2ParaDao;
    }

    public ipreceiveParaDao getIpreceiveParaDao() {
        return ipreceiveParaDao;
    }

    public dvbcParaDao getDvbcParaDao() {
        return dvbcParaDao;
    }

    public dvbsParaDao getDvbsParaDao() {
        return dvbsParaDao;
    }

    public ds3e3ParaDao getDs3e3ParaDao() {
        return ds3e3ParaDao;
    }

    public otherDao getOtherDao() {
        return otherDao;
    }

    public ipToASIParaDao getIpToASIParaDao() {
        return ipToASIParaDao;
    }

    public restartEnableDao getRestartEnableDao() {
        return restartEnableDao;
    }

}
