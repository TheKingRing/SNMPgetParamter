package com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.trapParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.netParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.versionParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.inputExistParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.decoder1ParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.decoder2ParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ipreceiveParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.dvbcParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.dvbsParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ds3e3ParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.otherDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.ipToASIParaDao;
import com.mycomp.mrwang.snmpgetparamter.database.GreenGenerator.restartEnableDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        trapParaDao.createTable(db, ifNotExists);
        netParaDao.createTable(db, ifNotExists);
        versionParaDao.createTable(db, ifNotExists);
        inputExistParaDao.createTable(db, ifNotExists);
        decoder1ParaDao.createTable(db, ifNotExists);
        decoder2ParaDao.createTable(db, ifNotExists);
        ipreceiveParaDao.createTable(db, ifNotExists);
        dvbcParaDao.createTable(db, ifNotExists);
        dvbsParaDao.createTable(db, ifNotExists);
        ds3e3ParaDao.createTable(db, ifNotExists);
        otherDao.createTable(db, ifNotExists);
        ipToASIParaDao.createTable(db, ifNotExists);
        restartEnableDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        trapParaDao.dropTable(db, ifExists);
        netParaDao.dropTable(db, ifExists);
        versionParaDao.dropTable(db, ifExists);
        inputExistParaDao.dropTable(db, ifExists);
        decoder1ParaDao.dropTable(db, ifExists);
        decoder2ParaDao.dropTable(db, ifExists);
        ipreceiveParaDao.dropTable(db, ifExists);
        dvbcParaDao.dropTable(db, ifExists);
        dvbsParaDao.dropTable(db, ifExists);
        ds3e3ParaDao.dropTable(db, ifExists);
        otherDao.dropTable(db, ifExists);
        ipToASIParaDao.dropTable(db, ifExists);
        restartEnableDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(trapParaDao.class);
        registerDaoClass(netParaDao.class);
        registerDaoClass(versionParaDao.class);
        registerDaoClass(inputExistParaDao.class);
        registerDaoClass(decoder1ParaDao.class);
        registerDaoClass(decoder2ParaDao.class);
        registerDaoClass(ipreceiveParaDao.class);
        registerDaoClass(dvbcParaDao.class);
        registerDaoClass(dvbsParaDao.class);
        registerDaoClass(ds3e3ParaDao.class);
        registerDaoClass(otherDao.class);
        registerDaoClass(ipToASIParaDao.class);
        registerDaoClass(restartEnableDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
